import { ensurePtau, run, time } from './common';
import * as fs from 'fs';
import * as path from 'path';

const CIRCUIT = '../withdraw.circom';
const CIRCUIT_NAME = 'withdraw';
const OUTPUT_DIR = path.resolve(__dirname, '../outputs/withdraw');
const PTAU_URL = 'https://storage.googleapis.com/zkevm/ptau/powersOfTau28_hez_final_14.ptau';
const PTAU_FILE = path.resolve(__dirname, '../powersOfTau28_hez_final_14.ptau');
const CONTRACTS_VERIFIER = path.resolve(__dirname, '../../contracts-evm/src/WithdrawVerifier.sol');

async function main() {
    if (!fs.existsSync(OUTPUT_DIR)) fs.mkdirSync(OUTPUT_DIR, { recursive: true });

    // 1. Ensure ptau file
    await ensurePtau(PTAU_FILE, PTAU_URL);

    // 2. Compile circuit
    await time('Compile circuit', async () => {
        run(`circom ${CIRCUIT} --r1cs --wasm --sym --O2 -o ${OUTPUT_DIR}`);
    });

    // 3. Generate zkey
    await time('Generate zkey', async () => {
        run(`snarkjs groth16 setup ${OUTPUT_DIR}/${CIRCUIT_NAME}.r1cs ${PTAU_FILE} ${OUTPUT_DIR}/circuit_final.zkey`);
    });

    // 4. Export vkey
    await time('Export vkey', async () => {
        run(`snarkjs zkey export verificationkey ${OUTPUT_DIR}/circuit_final.zkey ${OUTPUT_DIR}/verification_key.json`);
    });

    // 5. Generate Solidity verifier
    await time('Generate Solidity verifier', async () => {
        run(`snarkjs zkey export solidityverifier ${OUTPUT_DIR}/circuit_final.zkey ${OUTPUT_DIR}/verifier.sol`);
    });

    // 6. Copy verifier to contracts
    const verifierSource = path.join(OUTPUT_DIR, 'verifier.sol');
    if (fs.existsSync(verifierSource)) {
        let verifierContent = fs.readFileSync(verifierSource, 'utf8');
        const header = `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n// Auto-generated by snarkjs from withdraw.circom\n// Generated on: ${new Date().toISOString()}\n// Circuit: ${CIRCUIT}\n\n`;
        verifierContent = header + verifierContent;
        fs.writeFileSync(CONTRACTS_VERIFIER, verifierContent);
        console.log('✅ Verifier copied to:', CONTRACTS_VERIFIER);
    } else {
        throw new Error('❌ Generated verifier not found');
    }

    console.log('\n✅ Verifier generation completed successfully!');
    console.log('  - Solidity verifier:', CONTRACTS_VERIFIER);
    console.log('  - Verification key:', path.join(OUTPUT_DIR, 'verification_key.json'));
    console.log('  - Proving key:', path.join(OUTPUT_DIR, 'circuit_final.zkey'));
}

if (require.main === module) {
    main().catch(e => { console.error(e); process.exit(1); });
} 